"""
/***************************************************************************
 WaysCalc
                                 A QGIS plugin
 ways calculator
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2021-02-25
        git sha              : $Format:%H$
        copyright            : (C) 2021 by Zlatanov Evgeniy
        email                : johnzet@yandex.ru
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""

from PyQt5.QtCore import QVariant
from PyQt5.QtWidgets import QListWidget, QListWidgetItem
from qgis.PyQt.QtCore import QSettings, QTranslator, QCoreApplication, Qt, QObject
from qgis.PyQt.QtGui import QIcon, QColor
from qgis.PyQt import QtWidgets
from qgis.PyQt.QtWidgets import QAction, QTableWidgetItem
from qgis.core import (
    QgsProject,
    QgsVectorLayer,
    QgsWkbTypes, QgsRectangle,
    QgsMapLayerProxyModel,
    QgsGeometry
)
from qgis.gui import (
        QgsMapToolEmitPoint,
        QgsHighlight
)
# Initialize Qt resources from file resources.py

# Import the code for the DockWidget
from ..ways_calc_select_layers_dialog import WaysCalcSelectLayerDialog
from ..ways_calc_click_res_dialog import WaysCalcClickResDialog
from .infrastructure import CommonTools

import json
import os

class IntersectionWays:
    def __init__(self, iface, dockWidget):
        self.iface = iface
        self.dockWidget = dockWidget
        self.plugin_dir = os.path.dirname(__file__)
        print('init')

        self.map_clicked_dlg = WaysCalcClickResDialog()
        self.sel_layer_dlg = WaysCalcSelectLayerDialog()

        self.inters_layer = None # слой сравнения
        self.current_layer = None # текущий выбранный слой
        self.current_layer_selected_fs = None # объекты, которые попали под курсор на карте (лист словарей)

        self.settings = None
        self.settings_layer = None

        self.mapclicked_h_list = []
        self.onLoadModule()


    def onLoadModule(self):
        print('loadModule')
        self.map_clicked_dlg.tableClickedWays.itemSelectionChanged.connect(self.onMapClickedTableSeChanged)
        self.dockWidget.visibilityChanged.connect(self.onDockVisibilityChanged)
        self.initSettings()


    def onUnLoadModule(self):
        print('unloadModule')
        self.map_clicked_dlg.tableClickedWays.itemSelectionChanged.disconnect(self.onMapClickedTableSeChanged)
        self.dockWidget.visibilityChanged.disconnect(self.onDockVisibilityChanged)
        
        self.clearMapselectedHighlight()

    def initSettings(self):
        with open(os.path.join(self.plugin_dir, "..\settings.json"), "r") as read_file:
            self.settings = json.load(read_file)


    def onDockVisibilityChanged(self):
        if self.dockWidget.isHidden():
            self.clearMapselectedHighlight()
            self.current_layer.removeSelection()

    def onMapClickedTableSeChanged(self):
        cur_row_index = self.map_clicked_dlg.tableClickedWays.currentRow()
        if cur_row_index > -1:
            self.clearMapselectedHighlight()

            f_geometry = QgsGeometry()
            f_geometry = QgsGeometry.fromWkt(
                    self.map_clicked_dlg.tableClickedWays.item(cur_row_index, 1).text())

            h = QgsHighlight(self.iface.mapCanvas(), f_geometry, self.current_layer)
            h.setColor(QColor(0,100,200,220))
            h.setWidth(6)
            h.setFillColor(QColor(0,150,200,150))
            self.mapclicked_h_list.append(h)


    def clearMapselectedHighlight(self):
        for i, h in enumerate(self.mapclicked_h_list):
            self.mapclicked_h_list.pop(i)
            self.iface.mapCanvas().scene().removeItem(h)


    def __del__(self):
        print('deleted')


    def initLayerWays(self, current_layer = None):
        self.sel_layer_dlg.mMapLayerComboBox.setFilters(QgsMapLayerProxyModel.LineLayer)
        if current_layer is not None:
            if current_layer.geometryType() ==  QgsWkbTypes.LineGeometry:
                self.sel_layer_dlg.mMapLayerComboBox.setLayer(current_layer)
        self.sel_layer_dlg.show()
        result = self.sel_layer_dlg.exec_()
        if result:
            self.inters_layer = self.sel_layer_dlg.mMapLayerComboBox.currentLayer()


    def checkLayers(self):
        current_layer = self.iface.activeLayer()
        if (current_layer is not None and
                type(current_layer) == QgsVectorLayer and
                current_layer.geometryType() ==  QgsWkbTypes.LineGeometry):
            self.current_layer = current_layer
        else:
            self.iface.messageBar().pushMessage(f'Выберите векторный линейный слой, содержащий объект сравнения', f'', duration=5, level=2)
            return False

        if self.inters_layer is None:
            self.initLayerWays(current_layer)

        if self.current_layer is None or self.inters_layer is None:
            return False
        return True
    
    
    def insersection_take_way(self, point):
        self.current_layer.removeSelection()
        width = self.iface.mapCanvas().mapUnitsPerPixel() * 5
        rect = QgsRectangle(point.x() - width,
            point.y() - width,
            point.x() + width,
            point.y() + width)
        self.current_layer.selectByRect(rect)

        if self.current_layer.selectedFeatureCount() > 0:
            # self.iface.messageBar().clearWidgets()
            self.showClickedFeaturesList()


    def showClickedFeaturesList(self):
        table = self.map_clicked_dlg.tableClickedWays
        self.current_layer_selected_fs = []
        self.current_layer_selected_fs = CommonTools.populateTableByClickedFeatures(
                                                self.current_layer, table)

        self.current_layer.removeSelection()

        # percentBox = self.addFiltersDlg()
        self.addFiltersDlg()

        self.map_clicked_dlg.show()
        result = self.map_clicked_dlg.exec_()
        if result:
            # print(percentBox.value())
            self.dockWidget.show()
        else:
            self.clearMapselectedHighlight()


    def addFiltersDlg(self):
        inters_layer_name = self.inters_layer.name()
        if self.settings["modules"].get("intersection_ways") is not None:
            self.settings_layer = self.settings["modules"]["intersection_ways"]["layers"].get(inters_layer_name)
            if self.settings_layer is not None:
                ava_filters_fields = self.settings_layer.get("filters_fields")
                if ava_filters_fields is not None:
                    for field in ava_filters_fields:
                        self.addFilter(field)


    def addFilter(self, field):
        filter_label = QtWidgets.QLabel()
        filter_label.setObjectName(f"label_{field}")
        filter_label.setText(self.settings_layer["filters_fields"][field]["label"])
        
        filter_widget = self.createWidget(field)
        
        self.map_clicked_dlg.groupBox_filter.layout().addRow(filter_label, filter_widget)
        # print(getattr(QtWidgets, 'QSpinBox')())


    def createWidget(self, field):
        settings_field = self.settings_layer["filters_fields"][field]
        widget_type = settings_field["widget_type"]
        filter_widget = getattr(QtWidgets, widget_type)()
        filter_widget.setObjectName(field)

        widget_options = settings_field["widget_options"]
        for wo in widget_options:
            setattr(filter_widget, wo, widget_options[wo])

        if settings_field["source_type"] == "own":
            idx_field = self.inters_layer.fields().indexFromName(field)
            if not idx_field > 0:
                print(f"Field {field} does not found in layer")
            field_type = self.inters_layer.editorWidgetSetup(idx_field).type()
            if field_type == 'ValueMap':
                valuemap = self.inters_layer.editorWidgetSetup(idx_field).config()['map']
                for key, value in valuemap.items():
                        if widget_type == "QListWidget":
                            item = QListWidgetItem(value)
                            item.setData(Qt.UserRole, QVariant(key))
                            filter_widget.addItem(item)
                        elif widget_type == "QComboBox":
                            filter_widget.addItem(value, QVariant(key))

        return filter_widget


    # Добавление фильтров в окно результата после клика на карте
    def addFiltersDlg1(self):
        gb_filter_layout = self.map_clicked_dlg.groupBox_filter.layout()

        percentLayout = QtWidgets.QHBoxLayout()
        percentLayout.setObjectName("percentLayout")
        percentLabel = QtWidgets.QLabel()
        percentLabel.setObjectName("percentLabel") 
        percentLabel.setText("Минимальный процент пересечения")
        percentLayout.addWidget(percentLabel)
        percentSpinBox = QtWidgets.QSpinBox()
        percentSpinBox.setObjectName("percentSpinBox") 
        percentSpinBox.setMaximum(100)
        percentSpinBox.setMinimum(0)
        percentSpinBox.setSingleStep(5)
        percentSpinBox.setSuffix('%')
        percentLayout.addWidget(percentSpinBox)

        companiesLayout = QtWidgets.QHBoxLayout()
        companiesLayout.setObjectName("companiesLayout")
        companiesLabel = QtWidgets.QLabel()
        companiesLabel.setObjectName("companiesLabel") 
        companiesLabel.setText("Компании")
        companiesLayout.addWidget(percentLabel)
        companiesList = QtWidgets.QListWidget()
        companiesList.setObjectName("companiesList")

        gb_filter_layout.addLayout(percentLayout)

        return percentSpinBox
